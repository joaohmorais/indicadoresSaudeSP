# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI ----
ui <- fluidPage(
titlePanel("Censo"),
sidebarPanel(
helpText("Crie informações demográficas com base nos dados do censo de 2010 dos Estados Unidos."),
#br(),
selectInput("select", h3("Selecione uma Variável"),
choices = list("Porcentagem Branca" = 1,
"Porcentagem Negra" = 2,
"Porcentagem Asiática" = 3), selected = 1),
#br(),
sliderInput("slider", h3("Faixa de Interesse"),
min = 0, max = 100, value = c(0, 100))
),
mainPanel(
textOutput(h2("selected_var"), align="center")
)
)
# Define server logic ----
server <- function(input, output) {
output$selected_var <- renderText({
paste("Você selecionou: ", input$select)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
runApp('Documents/R/Shiny/Shiny Tutorials/widgets')
runApp('Documents/R/Shiny/Shiny Tutorials/widgets')
runApp('Documents/R/Shiny/Shiny Tutorials/widgets')
library(shiny)
# Define UI ----
ui <- fluidPage(
titlePanel("Censo"),
sidebarPanel(
helpText("Crie informações demográficas com base nos dados do censo de 2010 dos Estados Unidos."),
#br(),
selectInput("select", h3("Selecione uma Variável"),
choices = list("Porcentagem Branca",
"Porcentagem Negra",
"Porcentagem Asiática",
"Porcentagem Hispânica"), selected = "Porcentagem Branca"),
#br(),
sliderInput("slider", h3("Faixa de Interesse"),
min = 0, max = 100, value = c(0, 100))
),
mainPanel(
textOutput("selected_var")
)
)
# Define server logic ----
server <- function(input, output) {
output$selected_var <- renderText({
paste("Você selecionou: ", input$select)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI ----
ui <- fluidPage(
titlePanel("Censo"),
sidebarPanel(
helpText("Crie informações demográficas com base nos dados do censo de 2010 dos Estados Unidos."),
#br(),
selectInput("select", h3("Selecione uma Variável"),
choices = list("Porcentagem Branca",
"Porcentagem Negra",
"Porcentagem Asiática",
"Porcentagem Hispânica"), selected = "Porcentagem Branca"),
#br(),
sliderInput("slider", h3("Faixa de Interesse"),
min = 0, max = 100, value = c(0, 100))
),
mainPanel(
textOutput("selected_var")
)
)
# Define server logic ----
server <- function(input, output) {
output$selected_var <- renderText({
paste("Você selecionou: ", input$select),
paste("Range: De ", input$slider[1], " até ", input$slider[2])
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
runApp('Documents/R/Shiny/Shiny Tutorials/widgets')
library(shiny)
# Define UI ----
ui <- fluidPage(
titlePanel("Censo"),
sidebarPanel(
helpText("Crie informações demográficas com base nos dados do censo de 2010 dos Estados Unidos."),
#br(),
selectInput("select", h3("Selecione uma Variável"),
choices = list("Porcentagem Branca",
"Porcentagem Negra",
"Porcentagem Asiática",
"Porcentagem Hispânica"), selected = "Porcentagem Branca"),
#br(),
sliderInput("slider", h3("Faixa de Interesse"),
min = 0, max = 100, value = c(0, 100))
),
mainPanel(
textOutput("selected_var"),
textOutput("selected_range")
)
)
# Define server logic ----
server <- function(input, output) {
output$selected_var <- renderText({
paste("Você selecionou: ", input$select)
})
output$selected_range <- renderText({
paste("Range: De ", input$slider[1], " até ", input$slider[2])
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
ggplot(data = merged, aes(x=Taxa, y=DRS, color=DRS)) + geom_point(size=3, alpha=0.6) + labs(x="Taxa de Mortalidade Infantil", y="")
library(ggplot2)
ggplot(data = merged, aes(x=Despesa_Saúde, y=DRS, color=DRS)) + geom_point(size=5, alpha=0.6) + labs(x = "Despesa em Saúde per Capita", y="", title="Despesa em Saúde por DRS")
summary(iris)
library(ggplot2)
library(gridExtra)
library(grid)
#exemplo dado:
HisSl <- ggplot(data=iris, aes(x=iris$Sepal.Length))+geom_histogram(binwidth=0.2, color="black", aes(fill=Species)) +  xlab("Sepal Length (cm)") +   ylab("Frequency") +      theme(legend.position="none")+  ggtitle("Histogram of Sepal Length")+      geom_vline(data=iris, aes(xintercept = mean(iris$Sepal.Length)),linetype="dashed",color="grey")
#outros:
HisSw <- ggplot(data=iris, aes(x=iris$Sepal.Width))+geom_histogram(binwidth=0.2, color="black", aes(fill=Species)) +  xlab("Sepal Width (cm)") +   ylab("Frequency") +      theme(legend.position="none")+  ggtitle("Histogram of Sepal Width")+      geom_vline(data=iris, aes(xintercept = mean(iris$Sepal.Width)),linetype="dashed",color="grey")
HisSl
HisSw
HisPl <- ggplot(data=iris, aes(x=iris$Petal.Length))+geom_histogram(binwidth=0.2, color="black", aes(fill=Species)) +  xlab("Petal Length (cm)") +   ylab("Frequency") +      theme(legend.position="none")+  ggtitle("Histogram of Petal Length")+      geom_vline(data=iris, aes(xintercept = mean(iris$Petal.Length)),linetype="dashed",color="grey")
HisPw <- ggplot(data=iris, aes(x=iris$Petal.Width))+geom_histogram(binwidth=0.2, color="black", aes(fill=Species)) +  xlab("Petal Width (cm)") +   ylab("Frequency") +      theme(legend.position="none")+  ggtitle("Histogram of Petal Width")+      geom_vline(data=iris, aes(xintercept = mean(iris$Petal.Width)),linetype="dashed",color="grey")
HisPl
HisPw
grid.arrange(HisSl + ggtitle(""), HisSw + ggtitle(""), HisPl + ggtitle(""), HisPw  + ggtitle(""),             nrow = 2, top = textGrob("Iris Frequency Histogram", gp=gpar(fontsize=15)))
iris2 <- iris[sample(nrow(iris),0.1*nrow(iris)),]
View(iris2)
myhist <- function(d){
# Sepal length
HisSl <- ggplot(data=d, aes(x=Sepal.Length))+
geom_histogram(binwidth=0.2, color="black", aes(fill=Species)) +
xlab("Sepal Length (cm)") +
ylab("Frequency") +
theme(legend.position="none")+
ggtitle("Histogram of Sepal Length")+
geom_vline(data=d, aes(xintercept = mean(Sepal.Length)),linetype="dashed",color="grey")
# Sepal width
HistSw <- ggplot(data=d, aes(x=Sepal.Width)) +
geom_histogram(binwidth=0.2, color="black", aes(fill=Species)) +
xlab("Sepal Width (cm)") +
ylab("Frequency") +
theme(legend.position="none")+
ggtitle("Histogram of Sepal Width")+
geom_vline(data=d, aes(xintercept = mean(Sepal.Width)),linetype="dashed",color="grey")
# Petal length
HistPl <- ggplot(data=d, aes(x=Petal.Length))+
geom_histogram(binwidth=0.2, color="black", aes(fill=Species)) +
xlab("Petal Length (cm)") +
ylab("Frequency") +
theme(legend.position="none")+
ggtitle("Histogram of Petal Length")+
geom_vline(data=d, aes(xintercept = mean(Petal.Length)),
linetype="dashed",color="grey")
# Petal width
HistPw <- ggplot(data=d, aes(x=Petal.Width))+
geom_histogram(binwidth=0.2, color="black", aes(fill=Species)) +
xlab("Petal Width (cm)") +
ylab("Frequency") +
theme(legend.position="right" )+
ggtitle("Histogram of Petal Width")+
geom_vline(data=d, aes(xintercept = mean(Petal.Width)),linetype="dashed",color="grey")
# Plot all visualizations
grid.arrange(HisSl + ggtitle(""),
HistSw + ggtitle(""),
HistPl + ggtitle(""),
HistPw  + ggtitle(""),
nrow = 2,
top = textGrob("Iris Frequency Histogram",
gp=gpar(fontsize=15))
)
}
myhist(iris)
summary(iris)
myhist(iris2)
summary(iris2)
iris3 <- iris[sample(nrow(iris),0.1*nrow(iris)),]
myhist(iris3)
summary(iris3)
iris3 <- iris[sample(nrow(iris),0.5*nrow(iris)),]
myhist(iris3)
summary(iris3)
?sample
?sample
library(ggplot2)
myplot <- function(d){
ggplot(data=d, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color=Species, shape=Species)) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length vs Width")
}
irisPart <- subset(iris, select = Petal.Length:Species)
irisPart <- subset(irisPart,Species != "setosa")
irisPart <- droplevels(irisPart)
# Plotting
myplot(irisPart)
geom_point(aes(color=Species, shape=Species), size=3) +
myplot <- function(d){
ggplot(data=d, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color=Species, shape=Species), size=3) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length vs Width")
}
myplot <- function(d){
ggplot(data=d, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color=Species, shape=Species, size=3)) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length vs Width")
}
myplot(irisPart)
set.seed(2);
# making unbalanced version
irisUmb <- rbind(irisPart[ sample( which( irisPart$Species == "versicolor" ) , 10 ) , ],irisPart[which(irisPart$Species == "virginica" ),])
# Plotting
myplot(irisUmb)
library(unbalanced)
install.packages("unbalanced")
library(class)
library(unbalanced)
levels(irisUmb$Species)[levels(irisUmb$Species)=="virginica"] <- "0"
levels(irisUmb$Species)[levels(irisUmb$Species)=="versicolor"] <- "1"
output<-irisUmb$Species
input<-irisUmb[ ,-ncol(irisUmb)]
balance <- function(input,output,typ){
data<-ubBalance(X= input, Y=output, type=typ, verbose=TRUE)
balancedData<-cbind(data$X,data$Y)
names(balancedData)[3] <- "Species"
balancedData
}
balanced1<-balance(input,output,"ubUnder")
dim(balanced1)
myplot(balanced1)
irisPart <- subset(iris, select = Petal.Length:Species)
irisPart <- subset(irisPart,Species != "setosa")
irisPart <- droplevels(irisPart)
irisUmb <- rbind(irisPart[ sample( which( irisPart$Species == "versicolor" ) , 10 ) , ],irisPart[which(irisPart$Species == "virginica" ),])
# Plotting
myplot(irisUmb)
# Lets see what happens to unbalanced data
library(class)
# 1nn with irisPart
knn1 <- knn.cv(irisPart[,1:2], irisPart$Species, k = 1)
table(knn1, irisPart$Species)
knn1 <- knn.cv(irisPart[,1:2], irisPart$Species, k = 1)
table(knn1, irisPart$Species)
knn1 <- knn.cv(irisPart[,1:2], irisPart$Species, k = 1)
table(knn1, irisPart$Species)
knn2 <- knn.cv(irisUmb[,1:2], irisUmb$Species, k = 1)
table(knn2, irisUmb$Species)
balanced1<-balance(input,output,"ubUnder")
dim(balanced1)
myplot(balanced1)
# balance dataset with SMOTE (creates new points in the minority class)
balanced2<-balance(input,output,"ubSMOTE")
dim(balanced2)
myplot(balanced2)
knn1 <- knn.cv(balanced1[,1:2], irisPart$Species, k = 1)
knnb1 <- knn.cv(balanced1[,1:2], balanced1$Species, k = 1)
table(knn1, balanced1$Species)
table(knnb1, balanced1$Species)
irisM <- irisPart
inds <- sample(1:100, 2, replace=F)
irisM[inds,]
irisM$Petal.Length[inds] <- NA
View(irisM)
irisM$Petal.Length[is.na(irisM$Petal.Length)] <- mean(irisM$Petal.Length, na.rm = TRUE)
irisM[inds,]
library(NoiseFiltersR)
install.packages("NoiseFiltersR")
install.packages("NoiseFiltersR")
library(NoiseFiltersR)
install.packages("NoiseFiltersR")
R.Version()
myhist(iris)
iris2 <- iris[sample(nrow(iris),0.1*nrow(iris)),]
?sample
?nrow
View(iris2)
myhist(iris2)
myhist(iris3)
summary(iris3)
summary(iris)
summary(iris2)
iris4 <- iris[?sample(nrow(iris), 0.7*nrow(iris)),]
myhist(iris4)
iris4 <- iris[sample(nrow(iris), 0.7*nrow(iris)),]
myhist(iris4)
summary(iris4)
?sample
iris5 <- iris[sample(nrow(iris), replace = TRUE), 0.5*nrow(iris)),]
iris5 <- iris[sample(nrow(iris), replace = TRUE, 0.5*nrow(iris)),]
iris5 <- iris[sample(nrow(iris), 0.5*nrow(iris), replace = TRUE),]
myhist(iris5)
summary(iris5)
View(matriz3)
knnb2 <- knn.cv(balanced2[,1:2], balanced2$Species, k = 1)
table(knbb2, balanced2$Species)
table(knnb2, balanced2$Species)
install.packages("dummies")
library(dummies)
df <- dummy(iris$Species)
View(df)
x <- iris[,4]
hist(x, breaks=20, main="Equal Interval length") # breaking into 20 beans
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
ir.pca <- prcomp(log.ir,
ir.pca <- prcomp(log.ir,
center = TRUE,
scale. = TRUE)
print(ir.pca$rotation)
print(ir.pca$rotation)
ir.pca <- prcomp(log.ir,
center = TRUE,
scale = TRUE)
print(ir.pca$rotation)
summary(ir.pca)
shiny::runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
shiny::runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
navbarPage("App Bioestatística",
tabPanel(icon = icon("table"),
"Home",
sidebarLayout(
sidebarPanel(
p("Bem-vindo ao nosso app! Nele tentamos fazer com que o ensino da bioestatística seja facilitado e tenha maior alcance.")
),
mainPanel(p("Main Panel"))
)),
navbarMenu("Descritiva",
tabPanel("Tipos de Variáveis",
p(h2("Tipos de Variáveis")),
p("Aqui se mostrarão os tipos de variáveis.")),
tabPanel("Distribuição de Frequências",
p(h2("Distribuição de Frequências")),
p("Aqui se mostrarão as distribuições de frequências.")),
tabPanel("Gráficos",
sidebarLayout(
sidebarPanel(
p(h2("Gráficos")),
p(h4("Variáveis Qualitativas")),
selectInput("tipo", "Tipo de Gráfico:",
choices=c("Barras", "Pizza"))
),
mainPanel(plotOutput("plot"))
))
),
navbarMenu("Probabilidade",
tabPanel("Definição de Probabilidade",
p(h2("Definição de Probabilidade")),
p("Definição: perspectiva favorável de que algo venha a ocorrer; possibilidade, chance.")),
tabPanel("Teorema de Bayes",
p(h2("Teorema de Bayes")),
p("Você já conhece o Teorema de Bayes?"))
)
)
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
install.packages("shiny")
install.packages("shiny")
shiny::runApp('Documents/BIG/Shiny')
runApp('Documents/BIG/Shiny')
#################################
library(foreign)
ptm1 <- proc.time()
URL <- "ftp://ftp.datasus.gov.br/dissemin/publicos/SINASC/PRELIM/DNRES/DNPSE2016.dbc"
dbcfile <- "dnpse16.dbc"
download.file(URL, dbcfile)
dbffile <- "dnpse16.dbf"
dbc2dbf(dbcfile, dbffile)
install.packages("read.dbc")
R.Version()
install.packages("read.dbc")
#################################
library(foreign)
library(read.dbc)
URL <- "ftp://ftp.datasus.gov.br/dissemin/publicos/SINASC/PRELIM/DNRES/DNPSE2016.dbc"
dbcfile <- "dnpse16.dbc"
download.file(URL, dbcfile)
dbffile <- "dnpse16.dbf"
dbc2dbf(dbcfile, dbffile)
getwd()
dbf.data <- read.dbf(dbffile)
dbf.data
View(dbf.data)
View(dbf.data)
URL <- "ftp://ftp.datasus.gov.br/dissemin/publicos/SINASC/PRELIM/DNRES/DNPSP2016.dbc"
dbcfile <- "dnpse16.dbc"
download.file(URL, dbcfile)
dbffile <- "dnpse16.dbf"
dbc2dbf(dbcfile, dbffile)
dbf.data <- read.dbf(dbffile)
View(dbf.data)
summary(dbf.data)
#################################
library(foreign)
library(read.dbc)
URL <- "ftp://ftp.datasus.gov.br/dissemin/publicos/SINASC/PRELIM/DNRES/DNPSP2016.dbc"
dbcfile <- "dnpse16.dbc"
download.file(URL, dbcfile)
dbffile <- "dnpse16.dbf"
dbc2dbf(dbcfile, dbffile)
dbf.data <- read.dbf(dbffile)
View(dbf.data)
summary(dbf.data)
getData <- function() {
mortalidade_2017 <- read.csv("mortalidade_2017.csv")
mortalidade_2016 <- read.csv("mortalidade_2016.csv")
consultas_2017 <- read.csv("consultas_media_2017.csv")
consultas_2016 <- read.csv("consultas_media_2016.csv")
nomes <-read.csv("nomes.csv")
nomes <- reduceorder(nomes, 1)
colnames(nomes) <- c("COD_MUN", "Nome")
merged <- rbind(mortalidade_2017, mortalidade_2016, consultas_2017, consultas_2016)
#merged <- merge(nomes, merged, by="COD_MUN", all=TRUE)
merged$COD_MUN <- as.factor(merged$COD_MUN)
merged$Ano <- as.factor(merged$Ano)
merged$Valor <- as.numeric(sub(",", ".", as.character(merged$Valor), fixed = TRUE))
merged$Indicador <- as.factor(merged$Indicador)
merged$GeoType <- as.factor(merged$GeoType)
return (merged)
}
reduceorder <- function(dataf, order) {
dataf$CD_GEOCODM <- as.numeric(as.character(dataf$CD_GEOCODM))
dataf$CD_GEOCODM <- floor((dataf$CD_GEOCODM)/10^order)
dataf$CD_GEOCODM <- as.factor(dataf$CD_GEOCODM)
return (dataf)
}
shiny::runApp('Documents/TCC/SP-Leaflet-Try')
reduceorder <- function(dataf, order) {
dataf$CD_GEOCODM <- as.numeric(as.character(dataf$CD_GEOCODM))
dataf$CD_GEOCODM <- floor((dataf$CD_GEOCODM)/10^order)
dataf$CD_GEOCODM <- as.factor(dataf$CD_GEOCODM)
return (dataf)
}
getData <- function() {
mortalidade_2017 <- read.csv("mortalidade_2017.csv")
mortalidade_2016 <- read.csv("mortalidade_2016.csv")
consultas_2017 <- read.csv("consultas_media_2017.csv")
consultas_2016 <- read.csv("consultas_media_2016.csv")
nomes <-read.csv("nomes.csv")
nomes <- reduceorder(nomes, 1)
colnames(nomes) <- c("COD_MUN", "Nome")
merged <- rbind(mortalidade_2017, mortalidade_2016, consultas_2017, consultas_2016)
#merged <- merge(nomes, merged, by="COD_MUN", all=TRUE)
merged$COD_MUN <- as.factor(merged$COD_MUN)
merged$Ano <- as.factor(merged$Ano)
merged$Valor <- as.numeric(sub(",", ".", as.character(merged$Valor), fixed = TRUE))
merged$Indicador <- as.factor(merged$Indicador)
merged$GeoType <- as.factor(merged$GeoType)
return (merged)
}
shiny::runApp('Documents/TCC/SP-Leaflet-Try')
runApp('Documents/TCC/SP-Leaflet-Try')
runApp('Documents/TCC/SP-Leaflet-Try')
runApp('Documents/TCC/SP-Leaflet-Try')
mortalidade_2017 <- read.csv("mortalidade_2017.csv")
setwd("/home/joao/Documents/TCC/SP-Leaflet-Try/")
mortalidade_2017 <- read.csv("mortalidade_2017.csv")
mortalidade_2016 <- read.csv("mortalidade_2016.csv")
consultas_2017 <- read.csv("consultas_media_2017.csv")
consultas_2016 <- read.csv("consultas_media_2016.csv")
nomes <-read.csv("nomes.csv")
nomes <- reduceorder(nomes, 1)
colnames(nomes) <- c("COD_MUN", "Nome")
merged <- rbind(mortalidade_2017, mortalidade_2016, consultas_2017, consultas_2016)
head(merged, n=20)
merged[c(1,2)]
runApp()
runApp()
runApp()
runApp()
